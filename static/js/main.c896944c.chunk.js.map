{"version":3,"sources":["App.styles.ts","data/categories.ts","data/items.ts","helpers/dateFilter.ts","components/TableArea/styles.ts","components/TableItem/styles.ts","components/TableItem/index.tsx","components/TableArea/index.tsx","components/InfoArea/styles.ts","components/ResumeItem/styles.ts","components/ResumeItem/index.tsx","components/InfoArea/index.tsx","components/InputArea/styles.ts","components/InputArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Header","HeaderText","h1","Body","categories","food","title","color","expense","rent","salary","items","date","Date","category","value","formatDate","year","getFullYear","month","getMonth","day","getDate","addZeroToDate","n","formatCurrentMonth","currentMonth","split","parseInt","Table","table","TableHeadColumn","th","props","width","TableLine","tr","TableColumn","td","Category","Value","TableItem","item","TableArea","list","map","index","MonthArea","MonthArrow","MonthTitle","ResumeArea","Title","Info","ResumeItem","InfoArea","onMonthChange","income","onClick","currentDate","setMonth","InputLabel","label","InputTitle","Input","input","Select","select","Button","button","InputArea","onAdd","useState","dateField","setDateField","categoryField","setCategoryField","titleField","setTitleField","valueField","setValueField","categoryKeys","Object","keys","clearFields","type","onChange","e","target","key","parseFloat","errors","isNaN","getTime","push","includes","length","alert","join","App","setList","filteredList","setFilteredList","now","getCurrentMonth","setCurrentMonth","setIncome","setExpense","useEffect","newList","i","filterListByMonth","incomeCount","expenseCount","newMonth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c896944c.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div``;\n\nexport const Header = styled.div`\n    background-color: darkblue;\n    height: 150px;\n    text-align: center;\n`;\n\nexport const HeaderText = styled.h1`\n    margin: 0;\n    padding: 0;\n    color: #FFF;\n    padding-top: 30px;\n`;\n\nexport const Body = styled.div`\n    margin: auto;\n    max-width: 980px;\n    margin-bottom: 50px;\n`;","import { Category } from \"../types/Category\";\n\nexport const categories: Category = {\n  food: { title: \"Alimentação\", color: \"blue\", expense: true },\n  rent: { title: \"Aluguel\", color: \"brown\", expense: true },\n  salary: { title: \"Salário\", color: \"green\", expense: false },\n};\n","import { Item } from \"../types/Item\";\n\nexport const items: Item[] = [\n  {\n    date: new Date(2022, 2, 10),\n    category: \"food\",\n    title: \"McDonalds\",\n    value: 32.12,\n  },\n  {\n    date: new Date(2022, 2, 10),\n    category: \"food\",\n    title: \"Burger King\",\n    value: 28,\n  },\n  {\n    date: new Date(2022, 2, 10),\n    category: \"rent\",\n    title: \"Aluguel Apt\",\n    value: 2300,\n  },\n  {\n    date: new Date(2022, 10, 18),\n    category: \"salary\",\n    title: \"Salário ACME\",\n    value: 4500,\n  },\n];\n","import { Item } from \"../types/Item\";\n\nexport const getCurrentMonth = () => {\n  let now = new Date();\n  return `${now.getFullYear()}-${now.getMonth() + 1}`;\n};\n\nexport const filterListByMonth = (list: Item[], date: string): Item[] => {\n  let newList: Item[] = [];\n  let [year, month] = date.split(\"-\");\n\n  for (let i in list) {\n    if (\n      list[i].date.getFullYear() === parseInt(year) &&\n      list[i].date.getMonth() + 1 === parseInt(month)\n    ) {\n      newList.push(list[i]);\n    }\n  }\n\n  return newList;\n};\n\nexport const formatDate = (date: Date): string => {\n  let year = date.getFullYear();\n  let month = date.getMonth() + 1;\n  let day = date.getDate();\n\n  return `${addZeroToDate(day)}/${addZeroToDate(month)}/${year}`;\n};\nconst addZeroToDate = (n: number): string => (n < 10 ? `0${n}` : `${n}`);\n\nexport const formatCurrentMonth = (currentMonth: string): string => {\n  let [year, month] = currentMonth.split(\"-\");\n  let months = [\n    \"Janeiro\",\n    \"Fevereiro\",\n    \"Março\",\n    \"Abril\",\n    \"Maio\",\n    \"Junho\",\n    \"Julho\",\n    \"Agosto\",\n    \"Setembro\",\n    \"Outubro\",\n    \"Novembro\",\n    \"Dezembro\",\n  ];\n  return `${months[parseInt(month) - 1]} de ${year}`;\n};\n","import styled from 'styled-components';\n\nexport const Table = styled.table`\n    width: 100%;\n    background-color: #FFF;\n    padding: 20px;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius: 10px;\n    margin-top: 20px;\n    \n`;\n\nexport const TableHeadColumn = styled.th<{ width?: number }>`\n    width: ${props => props.width ? `${props.width}px` : 'auto'};\n    padding: 10px 0;\n    text-align: left;\n`;","import styled from 'styled-components';\n\nexport const TableLine = styled.tr``;\n\nexport const TableColumn = styled.td`\n    padding: 10px 0;\n`;\n\nexport const Category = styled.div<{ color: string }>`\n    display: inline-block;\n    padding: 5px 10px;\n    border-radius: 5px;\n    color: #FFF;\n    background-color: ${props => props.color};\n`;\n\nexport const Value = styled.div<{ color: string }>`\n    color: ${props => props.color};\n`;","import * as C from \"./styles\";\nimport { Item } from \"../../types/Item\";\nimport { formatDate } from \"../../helpers/dateFilter\";\nimport { categories } from \"../../data/categories\";\n\ntype Props = {\n  item: Item;\n};\n\nexport const TableItem = ({ item }: Props) => {\n  return (\n    <C.TableLine>\n      <C.TableColumn>{formatDate(item.date)}</C.TableColumn>\n      <C.TableColumn>\n        <C.Category color={categories[item.category].color}>\n          {categories[item.category].title}\n        </C.Category>\n      </C.TableColumn>\n      <C.TableColumn>{item.title}</C.TableColumn>\n      <C.TableColumn>\n        <C.Value color={categories[item.category].expense ? \"red\" : \"green\"}>\n          R$ {item.value}\n        </C.Value>\n      </C.TableColumn>\n    </C.TableLine>\n  );\n};\n","import * as C from \"./styles\";\nimport { Item } from \"../../types/Item\";\nimport { TableItem } from \"../TableItem\";\n\ntype Props = {\n  list: Item[];\n};\n\nexport const TableArea = ({ list }: Props) => {\n  return (\n    <C.Table>\n      <thead>\n        <tr>\n          <C.TableHeadColumn width={100}>Data</C.TableHeadColumn>\n          <C.TableHeadColumn width={130}>Categoria</C.TableHeadColumn>\n          <C.TableHeadColumn>Título</C.TableHeadColumn>\n          <C.TableHeadColumn width={150}>Valor</C.TableHeadColumn>\n        </tr>\n      </thead>\n      <tbody>\n        {list.map((item, index) => (\n          <TableItem key={index} item={item} />\n        ))}\n      </tbody>\n    </C.Table>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  background-color: #fff;\n  box-shadow: 0px 0px 5px #ccc;\n  border-radius: 10px;\n  padding: 20px;\n  margin-top: -40px;\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n\n`;\n\nexport const MonthArea = styled.div`\n  flex: 1;\n  display: flex;\n  align-items: center;\n`;\n\nexport const MonthArrow = styled.div`\n  width: 40px;\n  text-align: center;\n  font-size: 25px;\n  cursor: pointer;\n`;\n\nexport const MonthTitle = styled.div`\n  flex: 1;\n  text-align: center;\n`;\n\nexport const ResumeArea = styled.div`\n  flex: 2;\n  display: flex;\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    flex: 1;\n`;\n\nexport const Title = styled.div`\n    text-align: center;\n    font-weight: bold;\n    color: #888;\n    margin-bottom: 5px;\n`;\n\nexport const Info = styled.div<{ color?: string }>`\n    text-align: center;\n    font-weight: bold;\n    color: ${props => props.color ?? '#000'};\n`;","import * as C from \"./styles\";\n\ntype Props = {\n  title: string;\n  value: number;\n  color?: string;\n};\n\nexport const ResumeItem = ({ title, value, color }: Props) => {\n  return (\n    <C.Container>\n      <C.Title>{title}</C.Title>\n      <C.Info color={color}>R$ {value}</C.Info>\n    </C.Container>\n  );\n};\n","import * as C from \"./styles\";\nimport { formatCurrentMonth } from \"../../helpers/dateFilter\";\nimport { ResumeItem } from \"../ResumeItem\";\n\ntype Props = {\n  currentMonth: string;\n  onMonthChange: (newMonth: string) => void;\n  income: number;\n  expense: number;\n};\n\nexport const InfoArea = ({\n  currentMonth,\n  onMonthChange,\n  income,\n  expense,\n}: Props) => {\n  const handlePrevMonth = () => {\n    let [year, month] = currentMonth.split(\"-\");\n    let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1);\n    currentDate.setMonth(currentDate.getMonth() - 1);\n    onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`);\n  };\n\n  const handleNextMonth = () => {\n    let [year, month] = currentMonth.split(\"-\");\n    let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1);\n    currentDate.setMonth(currentDate.getMonth() + 1);\n    onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`);\n  };\n\n  return (\n    <C.Container>\n      <C.MonthArea>\n        <C.MonthArrow onClick={handlePrevMonth}>⬅️</C.MonthArrow>\n        <C.MonthTitle>{formatCurrentMonth(currentMonth)}</C.MonthTitle>\n        <C.MonthArrow onClick={handleNextMonth}>➡️</C.MonthArrow>\n      </C.MonthArea>\n      <C.ResumeArea>\n        <ResumeItem title=\"Receitas\" value={income} />\n        <ResumeItem title=\"Despesas\" value={expense} />\n        <ResumeItem\n          title=\"Balanço\"\n          value={income - expense}\n          color={income - expense < 0 ? \"red\" : \"green\"}\n        />\n      </C.ResumeArea>\n    </C.Container>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  background-color: #fff;\n  box-shadow: 0px 0px 5px #ccc;\n  border-radius: 10px;\n  padding: 20px;\n  margin-top: 20px;\n  display: flex;\n  flex-wrap: wrap;\n\n  align-items: center;\n`;\nexport const InputLabel = styled.label`\n  flex: 1;\n  margin: 10px;\n`;\nexport const InputTitle = styled.div`\n  font-weight: bold;\n  margin-bottom: 5px;\n`;\nexport const Input = styled.input`\n  width: 100%;\n  height: 30px;\n  padding: 0 5px;\n  border: 1px solid lightblue;\n  border-radius: 5px;\n`;\nexport const Select = styled.select`\n  width: 100%;\n  height: 30px;\n  padding: 0 5px;\n  border: 1px solid lightblue;\n  border-radius: 5px;\n`;\nexport const Button = styled.button`\n  width: 100%;\n  height: 30px;\n  padding: 0 5px;\n  border: 1px solid lightblue;\n  border-radius: 5px;\n  background-color: lightblue;\n  color: black;\n  cursor: pointer;\n\n  &:hover {\n    background-color: blue;\n    color: white;\n  }\n`;\n","import { useState } from \"react\";\nimport * as C from \"./styles\";\nimport { Item } from \"../../types/Item\";\n\nimport { categories } from \"../../data/categories\";\n\ntype Props = {\n  onAdd: (item: Item) => void;\n};\n\nexport const InputArea = ({ onAdd }: Props) => {\n  const [dateField, setDateField] = useState(\"\");\n  const [categoryField, setCategoryField] = useState(\"\");\n  const [titleField, setTitleField] = useState(\"\");\n  const [valueField, setValueField] = useState(0);\n\n  let categoryKeys: string[] = Object.keys(categories);\n\n  const handleAddEvent = () => {\n    let errors: string[] = [];\n\n    if (isNaN(new Date(dateField).getTime())) {\n      errors.push(\"Data inválida!\");\n    }\n    if (!categoryKeys.includes(categoryField)) {\n      errors.push(\"Categoria inválida!\");\n    }\n    if (titleField === \"\") {\n      errors.push(\"Título vazio!\");\n    }\n    if (valueField <= 0) {\n      errors.push(\"Valor inválido!\");\n    }\n\n    if (errors.length > 0) {\n      alert(errors.join(\"\\n\"));\n    } else {\n      onAdd({\n        date: new Date(dateField),\n        category: categoryField,\n        title: titleField,\n        value: valueField,\n      });\n      clearFields();\n    }\n  };\n\n  const clearFields = () => {\n    setDateField(\"\");\n    setCategoryField(\"\");\n    setTitleField(\"\");\n    setValueField(0);\n  };\n\n  return (\n    <C.Container>\n      <C.InputLabel>\n        <C.InputTitle>Data</C.InputTitle>\n        <C.Input\n          type=\"date\"\n          value={dateField}\n          onChange={(e) => setDateField(e.target.value)}\n        />\n      </C.InputLabel>\n      <C.InputLabel>\n        <C.InputTitle>Categoria</C.InputTitle>\n        <C.Select\n          value={categoryField}\n          onChange={(e) => setCategoryField(e.target.value)}\n        >\n          <>\n            <option></option>\n            {categoryKeys.map((key, index) => (\n              <option key={index} value={key}>\n                {categories[key].title}\n              </option>\n            ))}\n          </>\n        </C.Select>\n      </C.InputLabel>\n      <C.InputLabel>\n        <C.InputTitle>Título</C.InputTitle>\n        <C.Input\n          type=\"text\"\n          value={titleField}\n          onChange={(e) => setTitleField(e.target.value)}\n        />\n      </C.InputLabel>\n      <C.InputLabel>\n        <C.InputTitle>Valor</C.InputTitle>\n        <C.Input\n          type=\"number\"\n          value={valueField}\n          onChange={(e) => setValueField(parseFloat(e.target.value))}\n        />\n      </C.InputLabel>\n      <C.InputLabel>\n        <C.InputTitle>&nbsp;</C.InputTitle>\n        <C.Button onClick={handleAddEvent}>Adicionar</C.Button>\n      </C.InputLabel>\n    </C.Container>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport * as C from \"./App.styles\";\nimport { Item } from \"./types/Item\";\nimport { categories } from \"./data/categories\";\nimport { items } from \"./data/items\";\nimport { getCurrentMonth, filterListByMonth } from \"./helpers/dateFilter\";\nimport { TableArea } from \"./components/TableArea\";\nimport { InfoArea } from \"./components/InfoArea\";\nimport { InputArea } from \"./components/InputArea\";\n\nconst App = () => {\n  const [list, setList] = useState(items);\n  const [filteredList, setFilteredList] = useState<Item[]>([]);\n  const [currentMonth, setCurrentMonth] = useState(getCurrentMonth());\n  const [income, setIncome] = useState(0);\n  const [expense, setExpense] = useState(0);\n\n  useEffect(() => {\n    setFilteredList(filterListByMonth(list, currentMonth));\n  }, [list, currentMonth]);\n\n  useEffect(() => {\n    let incomeCount = 0;\n    let expenseCount = 0;\n\n    for (let i in filteredList) {\n      if (categories[filteredList[i].category].expense) {\n        expenseCount += filteredList[i].value;\n      } else {\n        incomeCount += filteredList[i].value;\n      }\n    }\n\n    setIncome(incomeCount);\n    setExpense(expenseCount);\n  }, [filteredList]);\n\n  const handleMonthChange = (newMonth: string) => {\n    setCurrentMonth(newMonth);\n  };\n\n  const handleAddItem = (item: Item) => {\n    let newList = [...list];\n    newList.push(item);\n    setList(newList);\n  };\n\n  return (\n    <C.Container>\n      <C.Header>\n        <C.HeaderText>Sistema Financeiro</C.HeaderText>\n      </C.Header>\n      <C.Body>\n        <InfoArea\n          currentMonth={currentMonth}\n          onMonthChange={handleMonthChange}\n          income={income}\n          expense={expense}\n        />\n\n        <InputArea onAdd={handleAddItem} />\n\n        <TableArea list={filteredList} />\n      </C.Body>\n    </C.Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}